import {
  BadRequestException,
  Injectable,
  NotFoundException,
  UnauthorizedException,
} from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { JwtService } from '@nestjs/jwt';
import { User } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import { CreateUserDto } from '../users/dto/create.users.dto';
import { UserResponseMapper } from '../users/dto/user-resp-mapper';
import { EmailService } from '../email/email.service';

@Injectable()
export class AuthService {
  constructor(
    private prisma: PrismaService,
    private jwtService: JwtService,
    private emailService: EmailService, // –î–æ–¥–∞–π—Ç–µ EmailService –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—ñ–≤
  ) {}

  async validateUser(email: string, password: string): Promise<User> {
    const user = await this.prisma.user.findUnique({ where: { email } });
    if (!user || !user.password) {
      throw new NotFoundException('Invalid email or password');
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      throw new UnauthorizedException('Invalid email or password');
    }

    return user;
  }

  async login(
    user: User,
  ): Promise<{ accessToken: string; refreshToken: string }> {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ user –≤–∞–ª—ñ–¥–Ω–∏–π (—è–∫—â–æ —Ü–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ)
    if (!user || !user.id || !user.email) {
      throw new UnauthorizedException('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }

    const payload = { sub: user.id, email: user.email, role: user.role };
    const accessToken = this.jwtService.sign(payload, { expiresIn: '1h' }); // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 1 –≥–æ–¥–∏–Ω–∏
    const refreshToken = this.jwtService.sign(payload, { expiresIn: '7d' }); // –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 7 –¥–Ω—ñ–≤

    try {
      await this.prisma.user.update({
        where: { id: user.id },
        data: { refreshToken }, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ refreshToken
      });
    } catch (error) {
      console.error('[AuthService] Failed to update user tokens:', error);
      throw new UnauthorizedException('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–æ–∫–µ–Ω—ñ–≤');
    }

    return { accessToken, refreshToken };
  }

  async refresh(refreshToken: string) {
  try {
    const payload = this.jwtService.verify(refreshToken);
    const user = await this.prisma.user.findUnique({
      where: { id: payload.sub },
    });

    if (!user || user.refreshToken !== refreshToken) {
      throw new UnauthorizedException('Invalid refresh token');
    }

    const newPayload = { sub: user.id, email: user.email, role: user.role };
    const accessToken = this.jwtService.sign(newPayload, { expiresIn: '1h' });
    const newRefreshToken = this.jwtService.sign(newPayload, { expiresIn: '7d' });

    await this.prisma.user.update({
      where: { id: user.id },
      data: { refreshToken: newRefreshToken },
    });

    return { accessToken, refreshToken: newRefreshToken };
  } catch {
    // üëá —Ç—É—Ç –Ω–µ –ø—Ä–æ–∫–∏–¥–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ø–æ–º–∏–ª–∫—É, –∞ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–¥–∞—î–º–æ 401
    throw new UnauthorizedException('Invalid refresh token');
  }
}


  async register(data: CreateUserDto) {
    const existing = await this.prisma.user.findUnique({
      where: { email: data.email },
    });
    if (existing) throw new UnauthorizedException('Email already exists');

    const hashedPassword = await bcrypt.hash(data.password, 10);

    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
    const resetCodeExpiry = new Date();
    resetCodeExpiry.setMinutes(resetCodeExpiry.getMinutes() + 15);

    const user = await this.prisma.user.create({
      data: {
        first_name: data.first_name,
        last_name: data.last_name,
        email: data.email,
        password: hashedPassword,
        phone: data.phone,
        address: data.address,
        city: data.city,
        country: data.country,
        postalCode: data.postalCode,
        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth) : null,
        role: data.role,
        resetCode: resetCode || null,
        resetCodeExpiry: resetCodeExpiry ? new Date(resetCodeExpiry) : null,
      },
    });

    const currentUser = await this.login(user);
    return UserResponseMapper.toResUserMapper(currentUser);
  }

  async changePassword(
    userId: number,
    currentPassword: string,
    newPassword: string,
  ) {
    const user = await this.prisma.user.findUnique({ where: { id: userId } });
    if (!user) throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');

    const isCurrentPasswordValid = await bcrypt.compare(
      currentPassword,
      user.password,
    );
    if (!isCurrentPasswordValid)
      throw new BadRequestException('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π');

    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword)
      throw new BadRequestException(
        '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–∏–º',
      );

    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    await this.prisma.user.update({
      where: { id: userId },
      data: { password: hashedNewPassword, refreshToken: null },
    });
  }

  async forgotPassword(email: string): Promise<void> {
    try {
      const user = await this.prisma.user.findUnique({
        where: { email },
      });

      if (!user) {
        throw new UnauthorizedException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
      }

      // –ì–µ–Ω–µ—Ä—É—î–º–æ 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥
      const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
      const resetCodeExpiry = new Date();
      resetCodeExpiry.setMinutes(resetCodeExpiry.getMinutes() + 15); // –ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π 15 —Ö–≤–∏–ª–∏–Ω

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–¥ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      await this.prisma.user.update({
        where: { id: user.id },
        data: {
          resetCode,
          resetCodeExpiry,
        },
      });

      try {
        await this.emailService.sendResetCode(email, resetCode);
      } catch (emailError) {
        console.error(
          '[AuthService] Failed to send reset code email:',
          emailError.message,
        );

        // –û—á–∏—â–∞—î–º–æ –∫–æ–¥ –∑ –±–∞–∑–∏, —è–∫—â–æ email –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—Å—è
        await this.prisma.user.update({
          where: { id: user.id },
          data: {
            resetCode: null,
            resetCodeExpiry: null,
          },
        });

        throw new Error(
          '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥ –Ω–∞ email. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        );
      }
    } catch (error) {
      console.error('[AuthService] Forgot password error:', error);
      if (error.message.includes('email')) {
        throw error; // –ü—Ä–æ–∫–∏–¥—É—î–º–æ email –ø–æ–º–∏–ª–∫–∏
      }
      throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è');
    }
  }

  async resetPassword(
    email: string,
    resetCode: string,
    newPassword: string,
  ): Promise<void> {
    try {
      const user = await this.prisma.user.findUnique({
        where: { email },
      });

      if (!user) {
        throw new UnauthorizedException(
          '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥ –∞–±–æ —á–∞—Å –¥—ñ—ó –∫–æ–¥—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
        );
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥ —Ç–∞ –π–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
      if (!user.resetCode || user.resetCode !== resetCode) {
        throw new UnauthorizedException(
          '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥ –∞–±–æ —á–∞—Å –¥—ñ—ó –∫–æ–¥—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
        );
      }

      if (!user.resetCodeExpiry || new Date() > user.resetCodeExpiry) {
        throw new UnauthorizedException(
          '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥ –∞–±–æ —á–∞—Å –¥—ñ—ó –∫–æ–¥—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
        );
      }

      // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
      const hashedNewPassword = await bcrypt.hash(newPassword, 10);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å —Ç–∞ –æ—á–∏—â—É—î–º–æ –∫–æ–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
      await this.prisma.user.update({
        where: { id: user.id },
        data: {
          password: hashedNewPassword,
          resetCode: null,
          resetCodeExpiry: null,
          // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –≤—Å—ñ refresh —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
          refreshToken: null,
        },
      });

      console.log(
        `[AuthService] Password reset successfully for user: ${user.id}`,
      );
    } catch (error) {
      if (error instanceof UnauthorizedException) {
        throw error;
      }
      console.error('[AuthService] Reset password error:', error);
      throw new UnauthorizedException(
        '–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ–¥ –∞–±–æ —á–∞—Å –¥—ñ—ó –∫–æ–¥—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è',
      );
    }
  }

  logout(userId) {
    console.log(`Logging out user with ID: ${userId}`);
    return { message: 'User logged out' };
  }
}
