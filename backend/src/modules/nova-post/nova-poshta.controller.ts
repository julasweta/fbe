import { Controller, Get, Query } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiQuery, ApiResponse } from '@nestjs/swagger';
import { NovaPoshtaService } from './nova-poshta.service';

@ApiTags('Nova Poshta')
@Controller('nova-poshta')
export class NovaPoshtaController {
  constructor(private readonly npService: NovaPoshtaService) {}

  @Get('warehouses')
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å' })
  @ApiQuery({
    name: 'cityRef',
    required: false,
    description: 'Ref –º—ñ—Å—Ç–∞ –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
  })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å' })
  async getWarehouses(@Query('cityRef') cityRef?: string) {
    return this.npService.getWarehouses(cityRef);
  }

  @Get('cities')
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç' })
  @ApiQuery({
    name: 'areaRef',
    required: false,
    description: 'Ref –æ–±–ª–∞—Å—Ç—ñ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É',
  })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç' })
  async getCities(@Query('areaRef') areaRef?: string) {
    return this.npService.getCities(areaRef);
  }

  @Get('areas')
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π' })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π' })
  async getAreas() {
    return this.npService.getAreas();
  }

  @Get('tracking')
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (–¢–¢–ù)' })
  @ApiQuery({
    name: 'ttn',
    required: true,
    description: '–ù–æ–º–µ—Ä –¢–¢–ù –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è',
  })
  @ApiResponse({ status: 200, description: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è' })
  async getTracking(@Query('ttn') ttn: string) {
    if (!ttn) {
      return { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –¢–¢–ù (ttn)' };
    }
    return this.npService.getTrackingInfo(ttn);
  }

  // üîπ GET /nova-poshta/warehouses-by-city?cityName=–õ—å–≤—ñ–≤
  @Get('warehouses-by-city')
  @ApiOperation({ summary: '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞' })
  @ApiQuery({
    name: 'cityName',
    required: true,
    description: '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é',
  })
  @ApiResponse({ status: 200, description: '–°–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –º—ñ—Å—Ç–∞' })
  async getWarehousesByCityName(@Query('cityName') cityName: string) {
    return await this.npService.getWarehousesByCityName(cityName);
  }
}
