import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';

@Injectable()
export class NovaPoshtaService {
  private readonly apiKey = process.env.NOVA_POSHTA_API_KEY;
  private readonly defaultCityRef = 'db5c88f5-391c-11dd-90d9-001a92567626'; // –ö–∏—ó–≤

  constructor(private readonly httpService: HttpService) {}

  async getWarehouses(cityRef: string = this.defaultCityRef) {
    const body = {
      apiKey: this.apiKey,
      modelName: 'Address',
      calledMethod: 'getWarehouses',
      methodProperties: { CityRef: cityRef },
    };

    try {
      const observable = this.httpService.post(
        'https://api.novaposhta.ua/v2.0/json/',
        body,
      );
      const response = await firstValueFrom(observable);

      if (!response.data.success) {
        throw new HttpException(
          response.data.errors?.join(', ') || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
          HttpStatus.INTERNAL_SERVER_ERROR,
        );
      }

      // üîπ –í–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
      const filtered = response.data.data.map((wh: any) => ({
        Ref: wh.Ref,
        Number: wh.Number,
        CityDescription: wh.CityDescription,
        ShortAddress: wh.ShortAddress,
        Phone: wh.Phone,
        WarehouseStatus: wh.WarehouseStatus,
        PostalCodeUA: wh.PostalCodeUA,
        Longitude: wh.Longitude,
        Latitude: wh.Latitude,
      }));

      return filtered;
    } catch (error) {
      throw new HttpException(
        error.message || error || '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async getAreas() {
    const body = {
      apiKey: this.apiKey,
      modelName: 'Address',
      calledMethod: 'getAreas',
      methodProperties: {},
    };

    try {
      const observable = this.httpService.post(
        'https://api.novaposhta.ua/v2.0/json/',
        body,
      );
      const response = await firstValueFrom(observable);

      if (!response.data.success) {
        throw new HttpException(
          response.data.errors?.join(', ') || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
          HttpStatus.INTERNAL_SERVER_ERROR,
        );
      }

      return response.data.data;
    } catch {
      throw new HttpException(
        '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async getCities(areaRef?: string) {
    const body = {
      apiKey: this.apiKey,
      modelName: 'Address',
      calledMethod: 'getCities',
      methodProperties: { AreaRef: areaRef || '' },
    };

    try {
      const observable = this.httpService.post(
        'https://api.novaposhta.ua/v2.0/json/',
        body,
      );
      const response = await firstValueFrom(observable);

      if (!response.data.success) {
        throw new HttpException(
          response.data.errors?.join(', ') || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
          HttpStatus.INTERNAL_SERVER_ERROR,
        );
      }

      // –í–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const citiesShort = response.data.data.map((city: any) => ({
        Ref: city.Ref,
        Description: city.Description, // –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ —É–∫—Ä
        DescriptionRu: city.DescriptionRu, // –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ —Ä–æ—Å
        Area: city.Area, // –û–±–ª–∞—Å—Ç—å
        SettlementType: city.SettlementTypeDescription,
      }));

      return citiesShort;
    } catch {
      throw new HttpException(
        '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async getTrackingInfo(ttn: string) {
    const body = {
      apiKey: this.apiKey,
      modelName: 'TrackingDocument',
      calledMethod: 'getStatusDocuments',
      methodProperties: { Documents: [{ DocumentNumber: ttn }] },
    };

    try {
      const observable = this.httpService.post(
        'https://api.novaposhta.ua/v2.0/json/',
        body,
      );
      const response = await firstValueFrom(observable);

      if (!response.data.success) {
        throw new HttpException(
          response.data.errors?.join(', ') || '–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
          HttpStatus.INTERNAL_SERVER_ERROR,
        );
      }

      return response.data.data;
    } catch {
      throw new HttpException(
        '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –∑–∞ –Ω–∞–∑–≤–æ—é –º—ñ—Å—Ç–∞
  async getWarehousesByCityName(cityName: string) {
    if (!cityName) {
      throw new HttpException(
        '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞',
        HttpStatus.BAD_REQUEST,
      );
    }

    // 1Ô∏è‚É£ –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤—ñ
    const cities = await this.getCities(); // –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º—ñ—Å—Ç–∞
    const city = cities.find(
      (c: any) => c.Description.toLowerCase() === cityName.toLowerCase(),
    );

    if (!city) {
      throw new HttpException('–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', HttpStatus.NOT_FOUND);
    }

    // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞
    const warehouses = await this.getWarehouses(city.Ref);

    return warehouses; // —É–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤
  }
}
