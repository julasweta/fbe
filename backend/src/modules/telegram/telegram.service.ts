import { Injectable } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { firstValueFrom } from 'rxjs';
import { OrderItemDto } from '../order-item/dto/order-item.dto';
import { UserForTelegram } from '../users/dto/base-user.dto';
import { PaymentMethod } from '@prisma/client';

@Injectable()
export class TelegramService {
  private readonly chatIds: string[];

  constructor(private readonly http: HttpService) {
    console.log('Telegram chatIds:', this.chatIds);

    // –ë–µ—Ä–µ–º–æ –≤—Å—ñ chat_id –∑ .env (—á–µ—Ä–µ–∑ –∫–æ–º—É)
    this.chatIds = process.env.TELEGRAM_CHAT_IDS
      ? process.env.TELEGRAM_CHAT_IDS.split(',').map((id) => id.trim())
      : [];
  }

  async sendOrderNotification(data: {
    user: UserForTelegram;
    items: OrderItemDto[] | undefined;
    paymentMethod: PaymentMethod;
  }) {
    const payment =
      data.paymentMethod === PaymentMethod.COD
        ? '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ'
        : '–û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–∫–æ—é';

    const message = `
üì¶ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
üë§ name:    ${data.user.name} 
‚òéÔ∏è phone:   ${data.user.phone}
üìß email:   ${data.user.email}
üè† ${data.user.address}, ${data.user.novaPostCity},
 ‚Ññ NovaPost ${data.user.novaPostBranch}
üí≥ –û–ø–ª–∞—Ç–∞: ${payment}

üõí –¢–æ–≤–∞—Ä–∏:
${
  data.items &&
  data.items
    .map(
      (i: OrderItemDto) => `‚Ä¢ ID: ${i.productId}
   –ù–∞–∑–≤–∞: ${i.name}
   –ö–æ–ª—ñ—Ä: ${i.color}
   –†–æ–∑–º—ñ—Ä: ${i.size}
   –ö-—Å—Ç—å: ${i.quantity}
   –¶—ñ–Ω–∞: ${i.price} –≥—Ä–Ω
   –¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: ${i.priceSale}
   –û—Å—Ç–∞—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${i.finalPrice} –≥—Ä–Ω
   –§–æ—Ç–æ: ${i.image}`,
    )
    .join('\n\n')
}
    `;

    await this.broadcastMessage(message);
  }

  async sendContactMessage(data: {
    name: string;
    email: string;
    message: string;
    imageUrl?: string;
  }) {
    const text = `
üì© –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ó –§–û–†–ú–ò
üë§ –Ü–º‚Äô—è: ${data.name}
üìß Email: ${data.email}
üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
${data.message}
    `;

    await this.broadcastMessage(text);

    if (data.imageUrl) {
      await this.broadcastPhoto(data.imageUrl, `–§–æ—Ç–æ –≤—ñ–¥ ${data.name}`);
    }
  }

  async messagesFromCustomer(data: any) {
    const text = `
üë§ –Ü–º‚Äô—è: ${data.name}
üìß Email: ${data.email}
üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:
${data.message}
    `;

    await this.broadcastMessage(text);
  }

  // üîπ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç—É –≤—Å—ñ–º chat_id
  private async broadcastMessage(text: string) {
    for (const chatId of this.chatIds) {
      try {
        await firstValueFrom(
          this.http.post(
            `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
            {
              chat_id: chatId,
              text,
              parse_mode: 'HTML',
            },
          ),
        );
      } catch (err) {
        console.error(
          `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram (chat_id=${chatId}):`,
          err.response?.data || err.message,
        );
      }
    }
  }

  // üîπ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤—Å—ñ–º chat_id
  private async broadcastPhoto(photoUrl: string, caption?: string) {
    for (const chatId of this.chatIds) {
      try {
        await firstValueFrom(
          this.http.post(
            `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendPhoto`,
            {
              chat_id: chatId,
              photo: photoUrl,
              caption,
            },
          ),
        );
      } catch (err) {
        console.error(
          `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram (chat_id=${chatId}):`,
          err.response?.data || err.message,
        );
      }
    }
  }
}
