datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String?   @unique
  password     String
  phone        String?
  address      String?
  city         String?
  country      String?
  postalCode   String?
  dateOfBirth  DateTime?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accessToken  String?
  refreshToken String?
  size         ESize?
  colr         EColor?

  cart   Cart?
  orders Order[]

  resetCode       String?
  resetCodeExpiry DateTime?
}

enum Role {
  ADMIN
  USER
  CUSTOMER
}

model Product {
  id        Int      @id @default(autoincrement())
  sku       String   @unique
  price     Float
  priceSale Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations ProductTranslation[]
  cartItems    CartItem[]
  features     ProductFeature[]
  images       ProductImage[]
  sizes        ESize[]              @default([])
  colors       EColor[]             @default([])

  variants ProductVariant[]

  category     Category?   @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?

  orderItems OrderItem[] // üëà –¥–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—å–æ—ó —Ä–µ–ª—è—Ü—ñ—ó
}

model ProductVariant {
  id          Int            @id @default(autoincrement())
  color       EColor
  sizes       ESize[] // üëà –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
  images      ProductImage[]
  price       Float?
  priceSale   Float?
  stock       Int            @default(0) // üëà –æ–¥–∏–Ω –∑–∞–≥–∞–ª—å–Ω–∏–π stock
  description String?

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model ProductImage {
  id        Int             @id @default(autoincrement())
  url       String
  altText   String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  order     Int             @default(0)
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  productId Int?
  product   Product? @relation(fields: [productId], references: [id]) // üëà –¥–æ–¥–∞—î–º–æ –∑–≤‚Äô—è–∑–æ–∫

  name           String
  image          String?
  quantity       Int     @default(1)
  price          Float
  priceSale      Float?
  finalPrice     Float
  color          String?
  size           String?
}

model Collection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String?  @unique
  imageUrl    String?

  products Product[]
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  slug          String?    @unique
  products      Product[]
  imageUrl      String?
}

model ProductFeature {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  text      String
  textEn    String?
  order     Int?
}

model Language {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  productTranslations ProductTranslation[]
}

model ProductTranslation {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  name        String
  description String?

  @@unique([productId, languageId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int?       @unique // –æ–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á = –æ–¥–∏–Ω –∫–æ—à–∏–∫
  sessionId String?    @unique
  guestId   String?    @unique // UUID –¥–ª—è –≥–æ—Å—Ç–µ–π
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  name      String // –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è
  image     String? // –∫–∞—Ä—Ç–∏–Ω–∫–∞
  color     String?
  size      String?
  price     Float
  priceSale Float?
  quantity  Int     @default(1)

  @@unique([cartId, productId, color, size])
}

model Order {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  guestName      String?
  guestPhone     String?
  guestEmail     String?
  guestAddress   String?
  novaPostCity   String?
  novaPostBranch String?

  paymentMethod PaymentMethod // üëà –î–æ–¥–∞–Ω–æ!
  status        OrderStatus   @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]
  trackingNumber String?
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum PaymentMethod {
  COD
  CARD
  APPLEPAY
  GOOGLEPAY
}

enum ESize {
  XS
  S
  M
  L
  XL
  XXL
}

enum EColor {
  RED
  GREEN
  BLUE
  BLACK
  WHITE
  YELLOW
  ORANGE
  PURPLE
  PINK
  GREY
  BROWN
}
