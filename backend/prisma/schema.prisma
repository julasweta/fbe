datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String?   @unique
  password     String
  phone        String?
  address      String?
  city         String?
  country      String?
  postalCode   String?
  dateOfBirth  DateTime?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accessToken  String?
  refreshToken String?
  size         ESize?
  colr         EColor?

  cart   Cart?
  orders Order[]

   // Нові поля для відновлення пароля
  resetCode       String?
  resetCodeExpiry DateTime?
}

enum Role {
  ADMIN
  USER
  CUSTOMER
}

model Product {
  id            Int               @id @default(autoincrement())
  sku           String            @unique
  price         Float
  priceSale     Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  translations  ProductTranslation[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  images        ProductImage[]
  features      ProductFeature[]
  sizes         ESize[]           @default([])
  colors        EColor[]          @default([])

  category      Category?         @relation(fields: [categoryId], references: [id])
  categoryId    Int?

  collection    Collection?       @relation(fields: [collectionId], references: [id])
  collectionId  Int?
}

model Collection {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  slug        String?    @unique
  imageUrl    String?

  products    Product[]  // Одна колекція має багато продуктів
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  parentId      Int? 
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  slug          String?    @unique
  products      Product[]
  imageUrl      String?
}

model ProductFeature {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  text      String
  order     Int?
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Language {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  productTranslations ProductTranslation[]
}

model ProductTranslation {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  name        String
  description String?

  @@unique([productId, languageId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
  price     Float
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

enum ESize {
  XS
  S
  M
  L
  XL
  XXL
}

enum EColor {
  RED
  GREEN
  BLUE
  BLACK
  WHITE
  YELLOW
  ORANGE
  PURPLE
  PINK
}

