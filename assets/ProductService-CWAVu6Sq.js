import{a as o,u as c}from"./index-B9kmO8zF.js";const u={async getAll(e=50,r=0){console.log("ProductService: Fetching products...");try{const{data:t}=await o.get(`products?limit=${e}&skip=${r}`),d=Array.isArray(t)?t:[];return c.getState().setProducts(d),d}catch(t){throw console.error("ProductService: Error fetching products:",t),c.getState().setError("Не вдалося отримати список продуктів: "+t.message),new Error("Не вдалося отримати список продуктів: "+t.message)}},async getById(e){console.log("ProductService: Fetching product by ID:",e);try{const{data:r}=await o.get(`products/${e}`);return console.log("ProductService: Received product:",r),r}catch(r){throw console.error("ProductService: Error fetching product:",r),new Error("Не вдалося отримати продукт: "+r.message)}},async addProduct(e){console.log("ProductService: Adding product:",e);try{const{data:r}=await o.post("products",e);return console.log("ProductService: Product added:",r),c.getState().addProduct(r),r}catch(r){throw console.error("ProductService: Error adding product:",r),new Error("Не вдалося додати продукт: "+r.message)}},async updateProduct(e,r){console.log("ProductService: Updating product:",e,r);try{const{data:t}=await o.patch(`products/${e}`,r);return console.log("ProductService: Product updated:",t),c.getState().updateProduct(t),t}catch(t){throw console.error("ProductService: Error updating product:",t),new Error("Не вдалося оновити продукт: "+t.message)}},async deleteProduct(e){console.log("ProductService: Deleting product:",e);try{await o.delete(`products/${e}`),console.log("ProductService: Product deleted:",e),c.getState().removeProduct(e)}catch(r){throw console.error("ProductService: Error deleting product:",r),new Error("Не вдалося видалити продукт: "+r.message)}},async testConnection(){try{return await o.get("products?limit=1"),console.log("ProductService: Connection test successful"),!0}catch(e){return console.error("ProductService: Connection test failed:",e),!1}}};export{u as productService};
