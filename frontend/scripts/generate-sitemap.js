import {writeFileSync, mkdirSync, existsSync, statSync, readFileSync} from 'fs';
import {join} from 'path';
import {fileURLToPath} from 'url';
import {dirname} from 'path';

// –î–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è XML —Å–∏–º–≤–æ–ª—ñ–≤
function escapeXML(str) {
  if (!str) return '';
  return str.toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
function formatDate(dateStr) {
  if (!dateStr) return new Date().toISOString().split('T')[0];

  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) {
      return new Date().toISOString().split('T')[0];
    }
    return date.toISOString().split('T')[0];
  } catch (error) {
    return new Date().toISOString().split('T')[0];
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ sitemap
async function checkSitemapAvailability(sitemapUrl) {
  try {
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å: ${sitemapUrl}`);
    const response = await fetch(sitemapUrl);

    if (response.ok) {
      console.log('‚úÖ Sitemap –¥–æ—Å—Ç—É–ø–Ω–∏–π –æ–Ω–ª–∞–π–Ω');
      return true;
    } else {
      console.warn(`‚ö†Ô∏è Sitemap –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${response.status} ${response.statusText}`);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:', error.message);
    return false;
  }
}

async function generateSitemap() {
  try {
    const API_URL = 'https://fbe.onrender.com/products';
    const SITEMAP_URL = 'https://fbe.pp.ua/sitemap.xml';

    console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ API...');

    const response = await fetch(API_URL, {
      headers: {'User-Agent': 'Mozilla/5.0'},
      timeout: 10000
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const products = data.data || [];

    console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤`);

    // –°—Ç–∞—Ç–∏—á–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const staticPages = [
      {
        url: 'https://fbe.pp.ua/',
        lastmod: new Date().toISOString().split('T')[0],
        changefreq: 'daily',
        priority: '1.0'
      },
      {
        url: 'https://fbe.pp.ua/products',
        lastmod: new Date().toISOString().split('T')[0],
        changefreq: 'daily',
        priority: '0.9'
      },
      {
        url: 'https://fbe.pp.ua/about',
        lastmod: new Date().toISOString().split('T')[0],
        changefreq: 'monthly',
        priority: '0.7'
      },
      {
        url: 'https://fbe.pp.ua/contact',
        lastmod: new Date().toISOString().split('T')[0],
        changefreq: 'monthly',
        priority: '0.6'
      }
    ];

    // –°—Ç–≤–æ—Ä—é—î–º–æ XML
    const xmlDeclaration = '<?xml version="1.0" encoding="UTF-8"?>';
    const urlsetOpen = '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
    const urlsetClose = '</urlset>';

    // –°—Ç–∞—Ç–∏—á–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ URLs
    const staticUrls = staticPages.map(page => `  <url>
    <loc>${escapeXML(page.url)}</loc>
    <lastmod>${page.lastmod}</lastmod>
    <changefreq>${page.changefreq}</changefreq>
    <priority>${page.priority}</priority>
  </url>`).join('\n');

    // –°—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    const productUrls = products
      .filter(product => product && (product.id || product._id))
      .slice(0, 50000) // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è sitemap
      .map(product => {
        const productId = escapeXML(product.id || product._id);
        const lastMod = formatDate(product.updatedAt || product.updated_at);

        return `  <url>
    <loc>https://fbe.pp.ua/product/${productId}</loc>
    <lastmod>${lastMod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>`;
      })
      .join('\n');

    // –ó–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å sitemap
    const sitemapParts = [
      xmlDeclaration,
      urlsetOpen,
      staticUrls
    ];

    if (productUrls) {
      sitemapParts.push(productUrls);
    }

    sitemapParts.push(urlsetClose);
    const sitemap = sitemapParts.join('\n');

    // –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª –¥–ª—è Vite
    const publicDir = join(__dirname, '..', 'public');
    const sitemapPath = join(publicDir, 'sitemap.xml');

    // –°—Ç–≤–æ—Ä—é—î–º–æ public –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if (!existsSync(publicDir)) {
      mkdirSync(publicDir, {recursive: true});
    }

    writeFileSync(sitemapPath, sitemap, 'utf8');
    console.log(`‚úÖ Sitemap —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${sitemapPath}`);

    // –¢–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–ª—è dist (–ø—ñ—Å–ª—è build)
    const distDir = join(__dirname, '..', 'dist');
    if (existsSync(distDir)) {
      const distSitemapPath = join(distDir, 'sitemap.xml');
      writeFileSync(distSitemapPath, sitemap, 'utf8');
      console.log(`‚úÖ Sitemap —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è production: ${distSitemapPath}`);
    }

    console.log(`üìä –í—Å—å–æ–≥–æ URL –≤ sitemap: ${staticPages.length + products.length}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
    if (existsSync(sitemapPath)) {
      const stats = statSync(sitemapPath);
      const fileSizeInBytes = stats.size;
      const fileSizeInKB = Math.round(fileSizeInBytes / 1024);

      console.log(`üìè –†–æ–∑–º—ñ—Ä sitemap: ${fileSizeInKB} KB`);

      if (fileSizeInBytes > 50 * 1024 * 1024) { // 50MB
        console.warn('‚ö†Ô∏è –†–æ–∑–º—ñ—Ä sitemap –±—ñ–ª—å—à–µ 50MB');
      }

      if (staticPages.length + products.length > 50000) {
        console.warn('‚ö†Ô∏è –ë—ñ–ª—å—à–µ 50,000 URL –≤ sitemap');
      }
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ sitemap
    validateSitemap(sitemapPath);

    console.log('‚è≥ –ß–µ–∫–∞—é 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –æ–Ω–ª–∞–π–Ω
    await checkSitemapAvailability(SITEMAP_URL);

    console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è sitemap –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó sitemap:', error.message);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π sitemap —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    const fallbackSitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://fbe.pp.ua/</loc>
    <lastmod>${new Date().toISOString().split('T')[0]}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>`;

    const publicDir = join(__dirname, '..', 'public');
    const sitemapPath = join(publicDir, 'sitemap.xml');

    if (!existsSync(publicDir)) {
      mkdirSync(publicDir, {recursive: true});
    }

    writeFileSync(sitemapPath, fallbackSitemap, 'utf8');
    console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤–∏–π sitemap —á–µ—Ä–µ–∑ fallback');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó sitemap
function validateSitemap(sitemapPath) {
  try {
    const sitemapContent = readFileSync(sitemapPath, 'utf8');

    if (!sitemapContent.includes('<?xml version="1.0" encoding="UTF-8"?>')) {
      throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è XML –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è');
    }

    if (!sitemapContent.includes('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')) {
      throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π namespace');
    }

    const urlCount = (sitemapContent.match(/<url>/g) || []).length;
    console.log(`‚úÖ Sitemap –≤–∞–ª—ñ–¥–Ω–∏–π: ${urlCount} URL –∑–Ω–∞–π–¥–µ–Ω–æ`);

    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó sitemap:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
generateSitemap();