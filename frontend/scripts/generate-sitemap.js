import {writeFileSync, mkdirSync, existsSync, statSync, readFileSync} from 'fs';
import {join} from 'path';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è XML —Å–∏–º–≤–æ–ª—ñ–≤
function escapeXML(str) {
  if (!str) return '';
  return str.toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
function formatDate(dateStr) {
  if (!dateStr) return new Date().toISOString();

  try {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) {
      return new Date().toISOString();
    }
    return date.toISOString();
  } catch (error) {
    return new Date().toISOString();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ sitemap
async function checkSitemapAvailability(sitemapUrl) {
  try {
    console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å: ${sitemapUrl}`);
    const response = await fetch(sitemapUrl);

    if (response.ok) {
      console.log('‚úÖ Sitemap –¥–æ—Å—Ç—É–ø–Ω–∏–π –æ–Ω–ª–∞–π–Ω');
      return true;
    } else {
      console.warn(`‚ö†Ô∏è Sitemap –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${response.status} ${response.statusText}`);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:', error.message);
    return false;
  }
}

async function generateSitemap() {
  try {
    const API_URL = 'https://fbe.onrender.com/products';
    const SITEMAP_URL = 'https://fbe.pp.ua/sitemap.xml';

    console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ API...');

    const response = await fetch(API_URL, {
      headers: {'User-Agent': 'Mozilla/5.0'}
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    const products = data.data || [];

    console.log(`üì¶ –ó–Ω–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤`);

    // –°—Ç–≤–æ—Ä—é—î–º–æ XML –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    const xmlDeclaration = '<?xml version="1.0" encoding="UTF-8"?>';
    const urlsetOpen = '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
    const urlsetClose = '</urlset>';

    // –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    const homeUrl = `  <url>
    <loc>https://fbe.pp.ua/</loc>
    <lastmod>${new Date().toISOString()}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>`;

    // –°—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    const productUrls = products
      .filter(product => product && product.id)
      .map(product => {
        const productId = escapeXML(product.id);
        const lastMod = formatDate(product.updatedAt);

        return `  <url>
    <loc>https://fbe.pp.ua/product/${productId}</loc>
    <lastmod>${lastMod}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>`;
      })
      .join('\n');

    // –ó–±–∏—Ä–∞—î–º–æ –≤–µ—Å—å sitemap
    const sitemap = [
      xmlDeclaration,
      urlsetOpen,
      homeUrl,
      productUrls,
      urlsetClose
    ].join('\n');

    // –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª —É –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ü—å (–¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)
    const locations = [
      join('public', 'sitemap.xml'),
      join('dist', 'sitemap.xml'), // –¥–ª—è production build
      'sitemap.xml' // –≤ –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É
    ];

    locations.forEach(sitemapPath => {
      try {
        const dir = sitemapPath.includes('/') ? sitemapPath.split('/')[0] : '';
        if (dir && !existsSync(dir)) {
          mkdirSync(dir, {recursive: true});
        }

        writeFileSync(sitemapPath, sitemap, 'utf8');
        console.log(`‚úÖ Sitemap —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${sitemapPath}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ sitemap —É ${sitemapPath}:`, error.message);
      }
    });

    console.log(`üìä –í—Å—å–æ–≥–æ URL –≤ sitemap: ${products.length + 1}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
    const mainSitemapPath = join('public', 'sitemap.xml');
    if (existsSync(mainSitemapPath)) {
      const stats = statSync(mainSitemapPath);
      const fileSizeInMB = stats.size / (1024 * 1024);

      if (fileSizeInMB > 50) {
        console.warn('‚ö†Ô∏è –†–æ–∑–º—ñ—Ä sitemap –±—ñ–ª—å—à–µ 50MB');
      }

      if (products.length > 50000) {
        console.warn('‚ö†Ô∏è –ë—ñ–ª—å—à–µ 50,000 URL');
      }
    }

    // –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    console.log('‚è≥ –ß–µ–∫–∞—é 3 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –æ–Ω–ª–∞–π–Ω
    await checkSitemapAvailability(SITEMAP_URL);

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó sitemap:', error.message);
    console.error('üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:', error);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó sitemap
function validateSitemap(sitemapPath) {
  try {
    const sitemapContent = readFileSync(sitemapPath, 'utf8');

    if (!sitemapContent.includes('<?xml version="1.0" encoding="UTF-8"?>')) {
      throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è XML –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è');
    }

    if (!sitemapContent.includes('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')) {
      throw new Error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π namespace');
    }

    const urlCount = (sitemapContent.match(/<url>/g) || []).length;
    console.log(`‚úÖ Sitemap –≤–∞–ª—ñ–¥–Ω–∏–π: ${urlCount} URL –∑–Ω–∞–π–¥–µ–Ω–æ`);

    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó sitemap:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
generateSitemap().then(() => {
  const sitemapPath = join('public', 'sitemap.xml');
  if (existsSync(sitemapPath)) {
    validateSitemap(sitemapPath);
  }
});