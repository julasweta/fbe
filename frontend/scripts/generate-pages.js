// scripts/generate-pages.js
const fs = require("fs");
const pathLib = require("path");
const fetch = require("node-fetch"); // npm i node-fetch@2

const API_URL = "https://fbe.onrender.com";

const staticRoutes = [
  {path: "/", title: "FULL BODY ERA - –ì–æ–ª–æ–≤–Ω–∞", description: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ FULL BODY ERA"},
  {path: "/about", title: "–ü—Ä–æ –Ω–∞—Å - FULL BODY ERA", description: "–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ FULL BODY ERA - –º—ñ—Å—ñ—è —Ç–∞ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ."},
  {path: "/contact", title: "–ö–æ–Ω—Ç–∞–∫—Ç–∏ - FULL BODY ERA", description: "–ó–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏."},
  {path: "/privacy", title: "–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ - FULL BODY ERA", description: "–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ FULL BODY ERA."},
  {path: "/cart", title: "–ö–æ—à–∏–∫ - FULL BODY ERA", description: "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–∞—à –∫–æ—à–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."},
  {path: "/checkout", title: "–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - FULL BODY ERA", description: "–û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –º–∞–≥–∞–∑–∏–Ω—ñ FULL BODY ERA."},
  {path: "/delivery-terms", title: "–î–æ—Å—Ç–∞–≤–∫–∞ - FULL BODY ERA", description: "–£–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ FULL BODY ERA."},
];

async function fetchDynamicRoutes() {
  try {
    const [products, categories, collections] = await Promise.all([
      fetch(`${API_URL}/products`).then(r => r.json()).catch(() => []),
      fetch(`${API_URL}/categories`).then(r => r.json()).catch(() => []),
      fetch(`${API_URL}/collections`).then(r => r.json()).catch(() => []),
    ]);

    const productRoutes = products.map(p => ({
      path: `/product/${p.id}`,
      title: `${p.name} - FULL BODY ERA`,
      description: p.description?.slice(0, 150) || `–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ ${p.name} —É FULL BODY ERA.`,
    }));

    const categoryRoutes = categories.map(c => ({
      path: `/category/${c.slug}`,
      title: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è ${c.name} - FULL BODY ERA`,
      description: `–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–æ–≤–∞—Ä–∏ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ${c.name}.`,
    }));

    const collectionRoutes = collections.map(col => ({
      path: `/group/${col.slug}`,
      title: `–ö–æ–ª–µ–∫—Ü—ñ—è ${col.name} - FULL BODY ERA`,
      description: `–î–æ—Å–ª—ñ–¥–∂—É–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó ${col.name}.`,
    }));

    return [...productRoutes, ...categoryRoutes, ...collectionRoutes];
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API:", err.message);
    return [];
  }
}

async function generateStaticPages() {
  const distDir = pathLib.join(__dirname, "../dist");
  const indexPath = pathLib.join(distDir, "index.html");

  if (!fs.existsSync(indexPath)) {
    console.error("‚ùå index.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ dist/");
    return;
  }

  const indexContent = fs.readFileSync(indexPath, "utf-8");

  const dynamicRoutes = await fetchDynamicRoutes();
  const allRoutes = [...staticRoutes, ...dynamicRoutes];

  for (const route of allRoutes) {
    const cleanPath = route.path.replace(/^\//, "");
    const routeDir = pathLib.join(distDir, cleanPath);

    if (!fs.existsSync(routeDir)) {
      fs.mkdirSync(routeDir, {recursive: true});
    }

    let modifiedContent = indexContent
      .replace(/<title>.*?<\/title>/i, `<title>${route.title}</title>`)
      .replace(/(<meta name="description" content=")[^"]*(")/i, `$1${route.description}$2`)
      .replace(/(<link rel="canonical" href=")[^"]*(")/, `$1https://fbe.pp.ua${route.path}$2`);

    const socialMeta = `
    <meta property="og:title" content="${route.title}" />
    <meta property="og:description" content="${route.description}" />
    <meta property="og:url" content="https://fbe.pp.ua${route.path}" />
    <meta name="twitter:title" content="${route.title}" />
    <meta name="twitter:description" content="${route.description}" />
  </head>`;

    modifiedContent = modifiedContent.replace("</head>", socialMeta);

    fs.writeFileSync(pathLib.join(routeDir, "index.html"), modifiedContent);
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: ${route.path}`);
  }

  console.log(`\nüéâ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ ${allRoutes.length} —Å—Ç–æ—Ä—ñ–Ω–æ–∫!`);
}

generateStaticPages();
