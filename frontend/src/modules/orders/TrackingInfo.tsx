import React, { useEffect, useState } from "react";
import { novaPoshtaService } from "../../services/NovaPostaService";
import type { INovaPoshtaOrder } from "../../interfaces/INovaPoshtaOrder";

interface TrackingInfoProps {
  trackingNumber: string;
  full?: boolean; // üëà —è–∫—â–æ true ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–æ–ª—è
}

export const TrackingInfo: React.FC<TrackingInfoProps> = ({ trackingNumber, full = false }) => {
  const [tracking, setTracking] = useState<INovaPoshtaOrder | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!trackingNumber) return;

    const fetchTracking = async () => {
      try {
        setLoading(true);
        setError(null);
        const data = await novaPoshtaService.getTracking(trackingNumber);
        setTracking(data);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } catch (err: any) {
        setError(err.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é");
      } finally {
        setLoading(false);
      }
    };

    fetchTracking();
  }, [trackingNumber]);

  if (!trackingNumber) {
    return <p>–ù–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π</p>;
  }

  if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...</p>;
  if (error) return <p className="error">–ü–æ–º–∏–ª–∫–∞: {error}</p>;
  if (!tracking) return <p>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è</p>;

  return (
    <div className="tracking-info">
      <h4>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è</h4>
      <ul>
        <li><strong>–ù–æ–º–µ—Ä –¢–¢–ù:</strong> {tracking.Number}</li>
        <li><strong>–°—Ç–∞—Ç—É—Å:</strong> {tracking.Status}</li>
        <li><strong>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</strong> {tracking.DateCreated}</li>
        <li><strong>–ú—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:</strong> {tracking.CityRecipient}</li>
        <li><strong>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:</strong> {tracking.WarehouseRecipient}</li>
        <li><strong>–û–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</strong> {tracking.DocumentCost} ‚Ç¥</li>
        <li><strong>–í–∞–≥–∞:</strong> {tracking.FactualWeight} –∫–≥</li>
        {tracking.ScheduledDeliveryDate && (
          <li><strong>–ü–ª–∞–Ω–æ–≤–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> {tracking.ScheduledDeliveryDate}</li>
        )}
      </ul>

      {full && (
        <div className="tracking-details">
          <h5>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</h5>
          <table>
            <tbody>
              {Object.entries(tracking).map(([key, value]) => (
                <tr key={key}>
                  <td><strong>{key}</strong></td>
                  <td>{String(value)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

