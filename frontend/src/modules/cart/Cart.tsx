import React, { useEffect, useState } from "react";
import styles from "./Cart.module.scss";
import { Button } from "../../components/ui/Buttons/Button";
import type { ICartItem } from "../../interfaces/ICartItem";
import CartItem from "./CartItem";
import { useNavigate } from "react-router-dom";

const Cart: React.FC = () => {
  const [cartItems, setCartItems] = useState<ICartItem[]>([]);
  const [isInitialized, setIsInitialized] = useState(false);
  const navigate = useNavigate();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –∑ localStorage
  useEffect(() => {
    const storedCart = localStorage.getItem("cart");
    if (storedCart) {
      try {
        const parsed = JSON.parse(storedCart) as ICartItem[];
        // –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∞—Ö—É—î–º–æ finalPrice
        const withFinal = parsed.map(item => {
          const price = item.priceSale && item.priceSale < item.price ? item.priceSale : item.price;
          return { ...item, finalPrice: price * item.quantity };
        });
        setCartItems(withFinal);
      } catch {
        setCartItems([]);
      }
    }
    setIsInitialized(true);
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É localStorage –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∫–æ—à–∏–∫–∞ (—Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó)
  useEffect(() => {
    if (isInitialized) {
      localStorage.setItem("cart", JSON.stringify(cartItems));
    }
  }, [cartItems, isInitialized]);

  const updateQuantity = (productId: number, quantity: number) => {
    setCartItems(prev =>
      prev.map(item => {
        if (item.productId === productId) {
          const newQty = Math.max(1, Math.min(99, quantity));
          const price = item.priceSale && item.priceSale < item.price ? item.priceSale : item.price;
          return { ...item, quantity: newQty, finalPrice: price * newQty };
        }
        return item;
      })
    );
  };

  const removeItem = (productId: number) => {
    setCartItems(prev => prev.filter(item => item.productId !== productId));
  };

  const total = cartItems.reduce((sum, item) => sum + item.finalPrice, 0);

  if (cartItems.length === 0) {
    return <div className={styles.empty}>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</div>;
  }

  const handleGoToCheckout = () => {
    if (cartItems.length === 0) {
      alert("üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π");
      return;
    }
    navigate("/checkout");
  };

  return (
    <div className={styles.cart}>
      <h1>–ö–æ—à–∏–∫</h1>
      <div className={styles.cartItems}>
        {cartItems.map(item => {
          return (
            <CartItem
              key={item.productId}
              item={item}
              price={item.finalPrice / item.quantity}
              updateQuantity={updateQuantity}
              removeItem={removeItem}
            />
          );
        })}
      </div>
      <div className={styles.total}>
        <h2>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ‚Ç¥{total.toFixed(2)}</h2>
        <Button
          className={styles.checkout}
          onClick={handleGoToCheckout}
        >
          –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Button>
      </div>
    </div>
  );
};

export default Cart;


