import { create } from "zustand";
import type { ICartItem } from "../interfaces/ICartItem";
import { cartService } from "../services/CartService";
import { useAuthStore } from "./useAuthStore";

interface CartState {
  cart: ICartItem[];
  setCart: (items: ICartItem[]) => void;

  addCartItem: (item: ICartItem) => Promise<void>;
  deleteCartItem: (cartItemId: number) => Promise<void>;
  deleteCartItems: () => Promise<void>;
  clearCart: () => Promise<void>;

  fetchCart: () => Promise<void>;
  loaded: boolean;
  isLoading: boolean; // –î–æ–¥–∞—î–º–æ —Ñ–ª–∞–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
}

export const useCartStore = create<CartState>((set, get) => ({
  cart: [],
  loaded: false,
  isLoading: false,

  setCart: (items) => set({ cart: items }),

  /** –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫ */
  addCartItem: async (item: ICartItem) => {
    try {
      const { user } = useAuthStore.getState();

      if (user?.id) {
        // ‚ö° –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö
        await cartService.addToCart(user.id, item);
        const updated = await cartService.getCart(user?.id);
        set({ cart: updated });
      } else {
        // ‚ö° –¥–ª—è –≥–æ—Å—Ç–µ–π
        const random = Math.floor(Math.random() * 1000);
        const guestId = item.productId + random;
        const itemWithId = { ...item, id: +guestId };

        const updated = cartService.addItem(itemWithId);
        set({ cart: updated });
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ –∫–æ—à–∏–∫:", error);
    }
  },

  clearCart: async () => {
    try {
      await cartService.clearLocalCart();
      set({ cart: [], loaded: false }); // –°–∫–∏–¥–∞—î–º–æ loaded
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞:", error);
    }
  },

  deleteCartItems: async () => {
    try {
      await cartService.deleteTCartItems();
      set({ cart: [] });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤:", error);
    }
  },

  deleteCartItem: async (cartItemId: string | number) => {
    const { user } = useAuthStore.getState();
    try {
      if (user) {
        // üü¢ –≤–∏–¥–∞–ª—è—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
        await cartService.deleteTCartItem(+cartItemId);
      }

      set((state) => {
        const updatedCart = state.cart.filter((item) => item.id !== cartItemId);

        // üü¢ —è–∫—â–æ –≥—ñ—Å—Ç—å ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ localStorage
        if (!user) {
          localStorage.setItem("cart", JSON.stringify(updatedCart));
        }

        return { cart: updatedCart };
      });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ delete Item:", error);
    }
  },

  fetchCart: async () => {
    const { loaded, isLoading } = get();
    const { user, accessToken } = useAuthStore.getState();

    if (isLoading) {
      return;
    }

    // –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Ç–æ–∫–µ–Ω–∞ - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ localStorage –¥–ª—è –≥–æ—Å—Ç–µ–π
    if (!user?.id || !accessToken) {
      try {
        const localCart = JSON.parse(localStorage.getItem("cart") || "[]");
        set({ cart: localCart, loaded: true });
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –∑ localStorage:", error);
        set({ cart: [], loaded: true });
      }
      return;
    }

    // –Ø–∫—â–æ –∫–æ—Ä–∑–∏–Ω–∞ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –Ω–µ —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
    if (loaded) {
      console.log("–ö–æ—à–∏–∫ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");
      return;
    }

    set({ isLoading: true });
    if (user?.id && accessToken) {
      try {
        const res = await cartService.getCart(user.id);
        set({ cart: res, loaded: true, isLoading: false });
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞:", error);
        set({ cart: [], loaded: true, isLoading: false });
      }
    }
  },
}));
