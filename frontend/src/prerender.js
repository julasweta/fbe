// src/prerender.js
export async function prerender(context) {
  console.log('üî• PRERENDER STARTED for URL:', context.url);

  const urlsToRender = ['/', '/about', '/product/36'];

  // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ URL
  const normalizedUrl = context.url.endsWith('/') && context.url !== '/'
    ? context.url.slice(0, -1)
    : context.url;

  const shouldRender = urlsToRender.includes(normalizedUrl) || urlsToRender.includes(context.url);

  console.log('üìã URL matching check:', {
    originalUrl: context.url,
    normalizedUrl,
    shouldRender,
    urlsToRender
  });

  if (!shouldRender) {
    console.log('‚è≠Ô∏è URL not in prerender list:', context.url);
    return null;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó render
  if (!context.render || typeof context.render !== 'function') {
    console.error('‚ùå Render function is not available for URL:', context.url);
    console.error('Available context keys:', Object.keys(context));
    return null;
  }

  try {
    console.log('‚è≥ Starting render for URL:', context.url);

    // –ó–º–µ–Ω—à—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–æ —Ä–æ–∑—É–º–Ω–∏—Ö –º–µ–∂
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log('‚è∞ Timeout completed, calling render function...');

    const html = await context.render();
    console.log('üìÑ Render completed, HTML length:', html?.length || 0);

    if (!html || typeof html !== 'string') {
      console.warn('‚ö†Ô∏è Render function returned invalid HTML for URL:', context.url);
      return null;
    }

    if (html.length < 100) {
      console.warn('‚ö†Ô∏è HTML seems too short for URL:', context.url, 'Length:', html.length);
      console.warn('HTML preview:', html.substring(0, 200));
    }

    // –ê–Ω–∞–ª—ñ–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É
    const hasRootDiv = html.includes('id="root"');
    const hasReactContent = html.includes('data-reactroot') || html.includes('react');

    console.log('üîç HTML content analysis:', {
      url: context.url,
      htmlLength: html.length,
      hasRootDiv,
      hasReactContent,
      preview: html.substring(0, 200) + '...'
    });

    console.log('‚úÖ Successfully rendered', context.url);

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    const result = {
      html,
      head: {
        lang: 'uk', // –∑–º—ñ–Ω–µ–Ω–æ –∑ 'ua' –Ω–∞ 'uk'
        title: getPageTitle(context.url),
        elements: new Set([
          {
            type: 'link',
            props: {
              rel: 'canonical',
              href: `https://fbe.pp.ua${context.url}`
            }
          },
          {
            type: 'meta',
            props: {
              name: 'description',
              content: getPageDescription(context.url)
            }
          },
          {
            type: 'meta',
            props: {
              property: 'og:title',
              content: getPageTitle(context.url)
            }
          },
          {
            type: 'meta',
            props: {
              property: 'og:image',
              content: getPageImage(context.url) // —Ç—É—Ç –±—É–¥–µ URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
            }
          },
        ]),
        
      },
    };

    console.log('üì¶ Returning result for URL:', context.url);
    return result;

  } catch (error) {
    console.error('üí• Error during rendering URL:', context.url);
    console.error('Error details:', error.message);
    console.error('Stack trace:', error.stack);
    return null;
  }
}

async function getPageTitle(url) {
  const match = url.match(/^\/product\/(\d+)$/);
  if (match) {
    const productId = match[1];
    try {
      const res = await fetch(`https://fbe.onrender.com/products/${productId}`);
      if (!res.ok) return `FULL BODY ERA - –¢–æ–≤–∞—Ä ${productId}`;
      const data = await res.json();
      const name = data.translations?.[0]?.name;
      return name ? `${name} - FULL BODY ERA` : `FULL BODY ERA - –¢–æ–≤–∞—Ä ${productId}`;
    } catch (err) {
      console.error('Error fetching product title:', err);
      return `FULL BODY ERA - –¢–æ–≤–∞—Ä ${productId}`;
    }
  }

  const titles = {
    '/': 'FULL BODY ERA - –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞',
    '/about': 'FULL BODY ERA - –ü—Ä–æ –Ω–∞—Å'
  };
  return titles[url] || `FULL BODY ERA - ${url}`;
}


// –ú–∞–ø–∏–º–æ URL –ø—Ä–æ–¥—É–∫—Ç—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
async function getPageImage(url) {
  // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—É
  const match = url.match(/^\/product\/(\d+)$/);
  if (match) {
    const productId = match[1];
    try {
      const res = await fetch(`https://fbe.onrender.com/products/${productId}`);
      if (!res.ok) return 'https://fbe.pp.ua/assets/default-og.jpg';
      const data = await res.json();
      // –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç—É
      const imageUrl = data.variants?.[0]?.images?.[0]?.url;
      return imageUrl ? `https://fbe.pp.ua${imageUrl}` : 'https://fbe.pp.ua/assets/default-og.jpg';
    } catch (err) {
      console.error('Error fetching product image:', err);
      return 'https://fbe.pp.ua/assets/default-og.jpg';
    }
  }
  // –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const images = {
    '/': 'https://fbe.pp.ua/assets/home-og.jpg',
    '/about': 'https://fbe.pp.ua/assets/about-og.jpg'
  };
  return images[url] || 'https://fbe.pp.ua/assets/default-og.jpg';
}



async function getPageDescription(url) {
  // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—É
  const match = url.match(/^\/product\/(\d+)$/);
  if (match) {
    const productId = match[1];
    try {
      const res = await fetch(`https://fbe.onrender.com/products/${productId}`);
      if (!res.ok) return 'FULL BODY ERA - –º–∞–≥–∞–∑–∏–Ω —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–¥—è–≥—É —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤.';
      const data = await res.json();
      const description = data.translations?.[0]?.description;
      return description?.slice(0, 150) || `–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ ${data.translations?.[0]?.name} —É FULL BODY ERA.`;
    } catch (err) {
      console.error('Error fetching product description:', err);
      return 'FULL BODY ERA - –º–∞–≥–∞–∑–∏–Ω —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–¥—è–≥—É —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤.';
    }
  }

  // –î–ª—è —ñ–Ω—à–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ñ –æ–ø–∏—Å
  const descriptions = {
    '/': 'FULL BODY ERA - –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –≥—Ä–∞—î –∫—Ä–∞—Å–∏–≤–æ. –°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –æ–¥—è–≥ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä–∏.',
    '/about': '–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ FULL BODY ERA - –Ω–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è —Ç–∞ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ.'
  };
  return descriptions[url] || 'FULL BODY ERA - –º–∞–≥–∞–∑–∏–Ω —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –æ–¥—è–≥—É —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤.';
}
